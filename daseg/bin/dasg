#!/usr/bin/env python

from pathlib import Path
from typing import Optional

import click

from daseg import DialogActCorpus, TransformerModel


@click.group()
def cli():
    pass


@cli.command()
@click.argument('output_dir', type=click.Path())
@click.option('--dataset-path', default='deps/swda/swda', type=click.Path(exists=True, file_okay=False))
@click.option('--window-size', type=int, default=None)
@click.option('--window-overlap', type=int, default=None)
@click.option('-p', '--strip-punctuation-and-lowercase', is_flag=True)
@click.option('-c', '--continuations-allowed', is_flag=True)
@click.option('-t', '--window-test', is_flag=True)
@click.option('-s', '--tagset', default='basic', type=click.Choice(['basic', 'general', 'full']))
def prepare_data(
        output_dir: str,
        dataset_path: str,
        window_size: Optional[int],
        window_overlap: Optional[int],
        strip_punctuation_and_lowercase: bool,
        continuations_allowed: bool,
        window_test: bool,
        tagset: str
):
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    dataset = DialogActCorpus.from_path(
        dataset_path=dataset_path,
        strip_punctuation_and_lowercase=strip_punctuation_and_lowercase,
        tagset=tagset
    )
    for split_name, split_dataset in dataset.train_dev_test_split().items():
        split_dataset.dump_for_transformers_ner(
            output_dir / f'{split_name}.txt.tmp',
            acts_count_per_sample=window_size if split_name != 'test' or window_test else None,
            acts_count_overlap=window_overlap if split_name != 'test' or window_test else None,
            continuations_allowed=continuations_allowed
        )


@cli.command()
@click.argument('model_path', type=click.Path(exists=True, file_okay=False))
@click.option('--dataset-path', default='deps/swda/swda', type=click.Path(exists=True, file_okay=False))
@click.option('--split', type=click.Choice(['train', 'dev', 'test']), default='test')
@click.option('--batch_size', default=4, type=int)
@click.option('--window_len', default=None, type=int)
@click.option('--device', default='cpu', type=str)
@click.option('-p', '--strip-punctuation-and-lowercase', is_flag=True)
@click.option('-s', '--tagset', default='basic', type=click.Choice(['basic', 'general', 'full']))
@click.option('-d', '--dont-propagate-context', is_flag=True)
@click.option('-v', '--verbose', is_flag=True)
def evaluate(
        model_path: str,
        dataset_path: str,
        split: str,
        batch_size: int,
        window_len: int,
        device: str,
        strip_punctuation_and_lowercase: bool,
        tagset: str,
        dont_propagate_context: bool,
        verbose: bool
):
    dataset = DialogActCorpus.from_path(
        dataset_path,
        splits=[split],
        strip_punctuation_and_lowercase=strip_punctuation_and_lowercase,
        tagset=tagset
    )
    model = TransformerModel.from_path(Path(model_path), device=device)
    results = model.predict(
        dataset,
        batch_size=batch_size,
        window_len=window_len,
        propagate_context=not dont_propagate_context,
        verbose=verbose
    )
    for res_grp in ('sklearn_metrics', 'seqeval_metrics', 'zhao_kawahara_metrics'):
        print(f'{res_grp.upper()}:')
        for key, val in results[res_grp].items():
            print(f'- {key} => {val:.2%}')


if __name__ == '__main__':
    cli()
